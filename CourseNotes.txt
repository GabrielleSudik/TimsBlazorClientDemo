Tim Corey's Which ASP.NET Core
Blazor Client App

Tim says Blazor Client will be different than the other
three UI apps. And it will use the API we made to get data.

It will look very similar to Blazor Server, but it's not.
For example, we won't add the reference to our Library project,
because the app won't be able to use it, because
everything Blazor Client runs on the client.

-- Install Nuget Package --

microsoft.aspnetcore.blazor.httpclient
(might need to turn on prerelease)
It inclused methods we need for httpclient.

-- Configure Dependency Injection --

Program.cs (No Startup.cs file!)
This is actually a console app.
(Aren't all asp.net core web apps, technically?)

Note the .Services stuff. That's the DI spot.
(Different from the other four apps.)
Specifically, use:
BaseAddress = new Uri("https://api.whichaspnetcore.com/") 
which will tell this app to work with the Tim's version of our API project.
(If your version is deployed, you can use it, but it's not deployed.)

-- Routing --

Program.cs.  This line:
builder.RootComponents.Add<App>("app"); 
The "app" points to App.razor. Check that out.
It's got the info about how routes will work.
It's like Blazor Server. Ex: 
Top of boilerplate Counter.razor page: "@page "/counter""
Top of boilerplate Index.razor page: "@page "/""

(FYI we deleted the boilerplate fetch weather data stuff)

-- Creating Data --

New Folder - Order. New item - Razor Component - Create.razor.
See notes.

You also added FoodModel and OrderModel, since you won't be accessing
them via the Library project, like you do for the other apps.
Also OrderUpdateModel, just to get it out of the way.

Finally, in _Imports:
@using BlazorClientDemoApp.Models

-- Reading Data --

New item in Order folder: Display.razor
New class: OrderResultModel.cs
New folder: Food. New Razor Component: List.razor

Hmm, something(s) in your code isn't working right.
Can't find the problem. :\

-- Updating Data --

It's the same code almost as Blazor Server.
But use the HttpClient methods like PutAsJsonAsync
instead of the methods we wrote in the Library project.
(This is true for all of your CRUD methods, really.)

-- Deleting Data --

Again, similar code to Blazor Server
except your method relies on HttpClient methods
not your Library project.

-- Deploying --

Again, not deployed because you're not set up.

--- End of Section on Blazor Client ---